generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // allow cross-schema FKs to Supabase's auth schema
  schemas  = ["public", "auth"]
}

model User {
  id           String    @id @default(cuid())
  phone        String    @unique
  name         String?
  createdAt    DateTime  @default(now())
  email        String?   @unique
  passwordHash String?
  role         UserRole  @default(CUSTOMER)
  addresses    Address[]
  orders       Order[]

  @@schema("public")
}

model Address {
  id        String   @id @default(cuid())
  userId    String
  line1     String
  line2     String?
  landmark  String?
  pincode   String
  lat       Float?
  lng       Float?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  orders    Order[]

  @@schema("public")
}

model Otp {
  id         String   @id @default(cuid())
  phone      String   @unique
  code       String
  expiresAt  DateTime
  attempts   Int      @default(0)
  lastSentAt DateTime @default(now())
  createdAt  DateTime @default(now())

  @@index([expiresAt])
  @@schema("public")
}

model Product {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique
  description String?
  brand       String?
  color       String?
  priceMrp    Int
  priceSale   Int
  images      String[]
  active      Boolean   @default(true)
  createdAt   DateTime  @default(now())
  variants    Variant[]

  @@schema("public")
}

model Variant {
  id           String             @id @default(cuid())
  productId    String
  size         String
  sku          String             @unique
  stockQty     Int                @default(0)
  OrderItem    OrderItem[]
  reservations StockReservation[]
  product      Product            @relation(fields: [productId], references: [id])

  @@schema("public")
}

model Order {
  id            String             @id @default(cuid())
  userId        String
  addressId     String
  subtotal      Int
  fees          Int                @default(0)
  discount      Int                @default(0)
  tax           Int                @default(0)
  paymentStatus String             @default("pending")
  createdAt     DateTime           @default(now())
  tbyb          Boolean            @default(false)
  updatedAt     DateTime           @updatedAt
  status        OrderStatus        @default(PENDING)
  courierId     String?
  address       Address            @relation(fields: [addressId], references: [id])
  user          User               @relation(fields: [userId], references: [id])
  items         OrderItem[]
  reservations  StockReservation[]
  TbybSession   TbybSession[]

  @@schema("public")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  variantId String
  qty       Int
  price     Int
  order     Order   @relation(fields: [orderId], references: [id])
  variant   Variant @relation(fields: [variantId], references: [id])

  @@schema("public")
}

model DeliverySlot {
  id          String   @id @default(cuid())
  date        DateTime
  windowStart DateTime
  windowEnd   DateTime
  capacity    Int
  bookedCount Int      @default(0)

  @@schema("public")
}

model TbybSession {
  id        String    @id @default(cuid())
  orderId   String
  courierId String
  startedAt DateTime  @default(now())
  endedAt   DateTime?
  result    String?
  notes     String?
  order     Order     @relation(fields: [orderId], references: [id])

  @@schema("public")
}

model StockReservation {
  id        String   @id @default(cuid())
  orderId   String
  variantId String
  qty       Int
  expiresAt DateTime
  createdAt DateTime @default(now())
  order     Order    @relation(fields: [orderId], references: [id])
  variant   Variant  @relation(fields: [variantId], references: [id])

  @@unique([orderId, variantId])
  @@index([expiresAt])
  @@schema("public")
}

enum UserRole {
  CUSTOMER
  ADMIN
  COURIER

  @@schema("public")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  CANCELLED
  EXPIRED
  DELIVERED

  @@schema("public")
}
